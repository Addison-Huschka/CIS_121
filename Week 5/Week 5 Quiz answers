'''#1
def reverse_string(word):
    return(word[0:])
print(reverse_string("hello"))

def is_fever(temp):
    temp


1. The normal human body temperature is 98.6F in Fahrenheit and 37C in Celsuis. Create a function
that determines if the temp is considered a fever(anove normal body temperature) or not. temp will
be measured in Fahrenheit and Celsuis.
Notice: The F or C will always be the last character in the string.
Examples:
 is fever(” 99F”) → True,
 is fever(” 37C”) → False,
 is fever(” 98F”) → False,
2. The boiling point of water is 212F in Fahrenheit and 100C in Celsuis. Create a function that
determines if the temp is considered boiling or not. temp will be measured in Fahrenheit and Celsuis.
Notice: The F or C will always be the last character in the string.
Examples:
 is boiling(” 212F”) → True,
 is boiling(” 100C”) → True,
 is boiling(” 0F”) → False,
3. The hamming distance is the number of characters that differ between two strings.
To illustrate,
str1 =” abcbba”
str2 =” abcbda”
The hamming distance is 1 since the only difference is the 5th character.
That is,” b” in str1 vs.” d” in str2.
Your task: create a function named hamming distance that takes two strings as arguments, and returns
the hamming distance between the two strings.
Examples:
 hamming distance(” abcde”,” bcdef”) → 5, since all 5 letters are different.
 hamming distance(” abcdef”,” abcdef”) → 0, since all 6 letters are the same.
 hamming distance(” strong”,” strung”) → 1, since there is only 1 character that is different.
4. An Isogram is a word that has no duplicate letters. Create a function that takes a string and returns
either True or False depending on whether or not it is an” isogram”. You may assume words will only
have lower case letters.
Examples:
 is isogram(” algorithm”) → True
 is isogram(” password”) → False (multiple of s)
 is isogram(” consecutive”) → False (multiple of c)
 is isogram(” python”) → True
5. A fruit juice company tags their fruit juices by concatenating the first three letters of the words in
a flavor’s name, with its capacity. Create a function that creates product IDs for different fruit juices.
Notice that the first input is a string and the second is an integer.
Examples:
1
 get drink ID(” apple”, 500) →” app500”
 get drink ID(” pineapple”, 45) →” pin45”
 get drink ID(” watermelon”, 750) →” wat750”
6. Reversing the order of words in a sentence can be helpful in text processing. Create a function called
reverse words that takes the variable sentence (a string) and returns the sentence with its words in
reversed order.
Examples:
 reverse words(” programming useful tools”) →” tools useful programming”
 reverse words(” python is a great language”) →” language great is a python”
 reverse words(” hello world”) →” world hello”
7. Zyra the code mage has hidden a mysterious cipher in reversed messages. You must help Zyra uncover
the secrets of the digital realm. Create a function called reverse string that takes the variable word
(a string) and returns the word in reversed order.
Examples:
 reverse string(” programming”) →” gnimmargorp”
 reverse string(” python”) →” nohtyp”
 reverse string(” hello”) →” olleh”
8. Professor Dumbledore seeks to decipher powerful encoded spells in the Hogwarts Library, their secrets
revealed by the first letter of each word. Create a function called f irst letters that takes the variable
sentence (a string) and returns a string made up of the first letters of each word in the sentence.
Examples:
 first letters(” wingardium leviosa makes objects float”) →” wlmof”
 first letters(” expecto patronum repels dementors”) →” eprd”
 first letters(” the magic is within you”) →” tmiy”
9. Severus Snape seeks to harness powerful spells in the Hogwarts Library, you must encode them by
using the last letter of each word. Create a function called last letters that takes the variable sentence
(a string) and returns a string made up of the last letters of each word in the sentence.
Examples:
 last letters(” wingardium leviosa makes objects float”) →” masst”
 last letters(” expecto patronum repels dementors”) →” omss”
 last letters(” the magic is within you”) →” ecsnu”
10. Write a function called flip flop that takes a string as an argument and returns a new word made up
of the second half of the word first combined with the first half of the word second.
Examples:
 flip flop(” abcd”) →” cdab” (that is,” cd” then” ab” . . . even length)
 flip flop(” grapes”) →” pesgra” (that is,” pes” then” gra” . . . even length)
 flip flop(” abcde”)→” decab” (that is,” de” then” c” then” ab” . . . odd length)
 flip flop(” cranberries”)→” rriesecranb” (that is,” rries” then” e” then” cranb” . . . odd length)
'''



'''#1 
def pyramid_volume(base,height):
    volume = ((base**2)*height)/3
    return (f'{volume:.2f}')
print(pyramid_volume(3,4))

#2
import math
def cone_volume(radius, height):
    volume = math.pi*(((radius**2)*height)/3)
    return(f'{volume:.2f}')
print(cone_volume(3,3))

#3
def total_score(two_pointers,three_pointers):
    two_pointers *= 2
    three_pointers *= 3
    score = two_pointers + three_pointers
    return score
print(total_score(10,10))

#4
def total_score(aces,winning_shots):
    aces *= 2
    score = aces + winning_shots
    return score
print(total_score(2,3))

#5
def leg_counter(chickens,cows,pigs):
    chickens *= 2
    cows *= 4
    pigs *= 4
    legs = chickens + cows + pigs
    return legs
print(leg_counter(4,3,2))
'''
#6
def battery_counter(dolls,cars,dogs):
    dolls *= 2
    cars *= 4
    dogs *= 6
    total = dolls + cars + dogs
    return total
print(battery_counter(4,3,2))